!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
GTKXDEBUGCLIENT_BASEPATH	application\GtkXdebugClientApplication.php	/^			define('GTKXDEBUGCLIENT_BASEPATH', realpath(dirname(__FILE__) . '\/..'));$/;"	d
GTKXDEBUGCLIENT_BASEPATH	main.php	/^define('GTKXDEBUGCLIENT_BASEPATH', dirname(__FILE__));$/;"	d
GtkXdebugClientApplication	application\GtkXdebugClientApplication.php	/^class GtkXdebugClientApplication {$/;"	c
View_Breakpoints	view\Breakpoints.php	/^class View_Breakpoints extends View_Widget {$/;"	c
View_Editor	view\Editor.php	/^class View_Editor extends View_Widget {$/;"	c
View_Stack	view\Stack.php	/^class View_Stack extends View_Widget {$/;"	c
View_Toolbar	view\Toolbar.php	/^class View_Toolbar extends View_Widget {$/;"	c
View_Trace	view\Trace.php	/^class View_Trace extends View_Widget {$/;"	c
View_Watch	view\Watch.php	/^class View_Watch extends View_Widget {$/;"	c
View_Widget	view\Widget.php	/^abstract class View_Widget {$/;"	c
XdebugProtocol	protocol\XdebugProtocol.php	/^class XdebugProtocol {$/;"	c
XdebugProtocol_BreakpointManager	protocol\BreakpointManager.php	/^class XdebugProtocol_BreakpointManager implements ArrayAccess {$/;"	c
XdebugProtocol_EventManager	protocol\EventManager.php	/^class XdebugProtocol_EventManager {$/;"	c
__construct	protocol\BreakpointManager.php	/^	public function __construct($protocol) {$/;"	f
__construct	protocol\XdebugProtocol.php	/^	public function __construct($application) {$/;"	f
__construct	view\Breakpoints.php	/^	public function __construct($widget, $protocol, $application) {$/;"	f
__construct	view\Editor.php	/^	public function __construct($widget, $protocol, $application) {$/;"	f
__construct	view\Toolbar.php	/^	public function __construct($widget, $protocol, $application) {$/;"	f
__construct	view\Trace.php	/^	public function __construct($widget, $protocol, $application) {$/;"	f
__construct	view\Widget.php	/^	public function __construct($widget, $protocol, $application) {$/;"	f
__get	protocol\EventManager.php	/^	public function &__get($name) {$/;"	f
__get	protocol\XdebugProtocol.php	/^	public function __get($name) {$/;"	f
_breakpoints	protocol\BreakpointManager.php	/^	protected $_breakpoints = array();$/;"	v
_breakpoints	protocol\XdebugProtocol.php	/^					$this->_breakpoints = new XdebugProtocol_BreakpointManager($this);$/;"	v
_events	protocol\XdebugProtocol.php	/^					$this->_events = new XdebugProtocol_EventManager($this);$/;"	v
_events	protocol\XdebugProtocol.php	/^	protected $_events;$/;"	v
addBreakpoint	view\Breakpoints.php	/^	public function addBreakpoint($file, $line, $id) {$/;"	f
addBreakpoint	view\Editor.php	/^	public function addBreakpoint($file, $line, $id) {$/;"	f
addMessage	view\Trace.php	/^	public function addMessage($msg) {$/;"	f
application	main.php	/^$application = new GtkXdebugClientApplication();$/;"	v
application	protocol\XdebugProtocol.php	/^		$this->application = $application;$/;"	v
application	view\Widget.php	/^		$this->application = $application;$/;"	v
application	view\Widget.php	/^	protected $application = null;$/;"	v
args	protocol\XdebugProtocol.php	/^	public function formatCommand($command, $args = array(), $data = "") {$/;"	v
argstring	protocol\XdebugProtocol.php	/^		$argstring = '';$/;"	v
breakpointId	protocol\BreakpointManager.php	/^		$breakpointId = $this->_breakpoints[$file][$line];$/;"	v
breakpointRemoved	protocol\BreakpointManager.php	/^	public function breakpointRemoved($message, $command, $params, $data) {$/;"	f
breakpointSet	protocol\BreakpointManager.php	/^	public function breakpointSet($message, $command, $params, $data) {$/;"	f
buffer	protocol\XdebugProtocol.php	/^						$this->buffer = '';$/;"	v
buffer	protocol\XdebugProtocol.php	/^					$this->buffer = '';$/;"	v
buffer	protocol\XdebugProtocol.php	/^		$buffer = trim($buffer);$/;"	v
color	view\Editor.php	/^	public function color($r, $g, $b) {$/;"	f
connection	protocol\XdebugProtocol.php	/^					$this->connection = false;$/;"	v
connection	protocol\XdebugProtocol.php	/^			$this->connection = @socket_accept($this->socket);$/;"	v
currentLine	view\Editor.php	/^		$this->currentLine = $num;$/;"	v
data	protocol\XdebugProtocol.php	/^			$data = @socket_read($this->connection, 2048);$/;"	v
dispatch	protocol\EventManager.php	/^	public function dispatch($name, $args) {$/;"	f
dispatchMessage	protocol\XdebugProtocol.php	/^	protected function dispatchMessage(SimpleXMLElement $message) {$/;"	f
editor	view\Editor.php	/^		$this->editor = new GtkScintilla;$/;"	v
errorsEnabled	protocol\XdebugProtocol.php	/^		$errorsEnabled = libxml_use_internal_errors(true);$/;"	v
events	protocol\EventManager.php	/^	protected $events = array();$/;"	v
file	application\GtkXdebugClientApplication.php	/^				$file = realpath(GTKXDEBUGCLIENT_BASEPATH . '\/application\/' . $name . '.php');$/;"	v
file	application\GtkXdebugClientApplication.php	/^				$file = realpath(GTKXDEBUGCLIENT_BASEPATH . '\/protocol\/' . (empty($name) ? 'XdebugProtocol' : $name) . '.php');$/;"	v
file	application\GtkXdebugClientApplication.php	/^				$file = realpath(GTKXDEBUGCLIENT_BASEPATH . '\/view\/' . $name . '.php');$/;"	v
file	application\GtkXdebugClientApplication.php	/^		$file = '';$/;"	v
file	protocol\BreakpointManager.php	/^		$file = $params['f'];$/;"	v
file	protocol\BreakpointManager.php	/^		$file = substr($offset, 0, $pos);$/;"	v
filename	view\Editor.php	/^		$this->filename = $filename;$/;"	v
formatCommand	protocol\XdebugProtocol.php	/^	public function formatCommand($command, $args = array(), $data = "") {$/;"	f
i	protocol\XdebugProtocol.php	/^		static $i = 0;$/;"	v
initAutoloader	application\GtkXdebugClientApplication.php	/^	public function initAutoloader() {$/;"	f
initPacketReceived	protocol\XdebugProtocol.php	/^	protected function initPacketReceived(SimpleXMLElement $message) {$/;"	f
initializeProtocol	application\GtkXdebugClientApplication.php	/^	public function initializeProtocol() {$/;"	f
line	protocol\BreakpointManager.php	/^		$line = $params['n'];$/;"	v
line	protocol\BreakpointManager.php	/^		$line = substr($offset, $pos + 1);$/;"	v
line	view\Editor.php	/^		$line = $this->editor->line_from_position($position);$/;"	v
list	view\Breakpoints.php	/^		$this->list = new GtkListStore(GObject::TYPE_STRING, GObject::TYPE_STRING);$/;"	v
list	view\Breakpoints.php	/^	protected $list = null;$/;"	v
list	view\Trace.php	/^		$this->list = new GtkListStore(GObject::TYPE_STRING);$/;"	v
list	view\Trace.php	/^	protected $list = null;$/;"	v
loadClass	application\GtkXdebugClientApplication.php	/^	public function loadClass($className) {$/;"	f
loadUI	application\GtkXdebugClientApplication.php	/^	public function loadUI() {$/;"	f
main	application\GtkXdebugClientApplication.php	/^	public function main() {$/;"	f
main	protocol\XdebugProtocol.php	/^	public function main() {$/;"	f
marginClicked	view\Editor.php	/^	public function marginClicked($editor, $mods, $position, $margin) {$/;"	f
mask	view\Editor.php	/^	public function mask($num) {$/;"	f
message	protocol\XdebugProtocol.php	/^					$message = $this->parse($this->buffer);$/;"	v
msg	protocol\XdebugProtocol.php	/^			$msg = simplexml_load_string($buffer);$/;"	v
msg	protocol\XdebugProtocol.php	/^		$msg = false;$/;"	v
name	application\GtkXdebugClientApplication.php	/^			$name = $className;$/;"	v
name	protocol\XdebugProtocol.php	/^		foreach ($args as $name => $value) {$/;"	v
offsetExists	protocol\BreakpointManager.php	/^	public function offsetExists($offset) {$/;"	f
offsetGet	protocol\BreakpointManager.php	/^	public function offsetGet($offset) {$/;"	f
offsetSet	protocol\BreakpointManager.php	/^	public function offsetSet($offset, $value) {$/;"	f
offsetToPosition	protocol\BreakpointManager.php	/^	public function offsetToPosition($offset) {$/;"	f
offsetUnset	protocol\BreakpointManager.php	/^	public function offsetUnset($offset) {$/;"	f
params	protocol\XdebugProtocol.php	/^	public function send($callback, $command, $params = array(), $data = "") {$/;"	v
parse	protocol\XdebugProtocol.php	/^	protected function parse($buffer) {$/;"	f
port	protocol\XdebugProtocol.php	/^	protected $port = 9000;$/;"	v
pos	protocol\BreakpointManager.php	/^		$pos = strrpos($offset, ':');$/;"	v
protocol	application\GtkXdebugClientApplication.php	/^		$this->protocol = new XdebugProtocol($this);$/;"	v
protocol	protocol\BreakpointManager.php	/^		$this->protocol = $protocol;$/;"	v
protocol	view\Widget.php	/^		$this->protocol = $protocol;$/;"	v
protocol	view\Widget.php	/^	protected $protocol = null;$/;"	v
quit	application\GtkXdebugClientApplication.php	/^	public function quit() {$/;"	f
ref	view\Breakpoints.php	/^	protected $ref = array();$/;"	v
removeBreakpoint	view\Breakpoints.php	/^	public function removeBreakpoint($file, $line, $id) {$/;"	f
removeBreakpoint	view\Editor.php	/^	public function removeBreakpoint($file, $line) {$/;"	f
responsePacketReceived	protocol\XdebugProtocol.php	/^	protected function responsePacketReceived(SimpleXMLElement $message) {$/;"	f
run	application\GtkXdebugClientApplication.php	/^	public function run() {$/;"	f
runClicked	view\Toolbar.php	/^	public function runClicked() {$/;"	f
send	protocol\XdebugProtocol.php	/^	public function send($callback, $command, $params = array(), $data = "") {$/;"	f
sendQueue	protocol\XdebugProtocol.php	/^	protected $sendQueue = array();$/;"	v
sentQueue	protocol\XdebugProtocol.php	/^	protected $sentQueue = array();$/;"	v
setCurrentLine	view\Editor.php	/^	public function setCurrentLine($num) {$/;"	f
setSource	view\Editor.php	/^	public function setSource($filename, $contents) {$/;"	f
showHide	view\Trace.php	/^	public function showHide() {$/;"	f
socket	protocol\XdebugProtocol.php	/^			$this->socket = socket_create_listen($this->port);$/;"	v
sourceReceived	protocol\XdebugProtocol.php	/^	protected function sourceReceived(SimpleXMLElement $message, $command, $params, $data) {$/;"	f
trace	protocol\XdebugProtocol.php	/^	protected function trace($msg) {$/;"	f
traceIn	protocol\XdebugProtocol.php	/^	protected function traceIn($msg) {$/;"	f
traceOut	protocol\XdebugProtocol.php	/^	protected function traceOut($msg) {$/;"	f
tree	view\Trace.php	/^		$this->tree = $this->application->ui->get_widget('trace_tree');$/;"	v
ui	application\GtkXdebugClientApplication.php	/^		$this->ui = new GladeXML(GTKXDEBUGCLIENT_BASEPATH . '\/view\/interface.glade');$/;"	v
version	protocol\XdebugProtocol.php	/^	protected static $version = '0.1';$/;"	v
views	application\GtkXdebugClientApplication.php	/^		$this->views = new stdClass;$/;"	v
views	application\GtkXdebugClientApplication.php	/^	public $views = null;$/;"	v
visible	view\Trace.php	/^			$this->visible = false;$/;"	v
visible	view\Trace.php	/^			$this->visible = true;$/;"	v
widget	view\Widget.php	/^		$this->widget = $widget;$/;"	v
widget	view\Widget.php	/^	protected $widget = null;$/;"	v
window	application\GtkXdebugClientApplication.php	/^		$this->window = $this->ui->get_widget('rootWnd');$/;"	v
